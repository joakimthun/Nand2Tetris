// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // A-instruction: 0VVV VVVV VVVV VVVV
    // E.g.           0111 1011 1100 1111

    // a and c=ALU control bits d=destination  j=jump
    // C-instruction: 111a c1c2c3c4 c5c6d1d2 d3j1j2j3
    // E.g.           1110  0 1 1 1  1 1 0 1  0 1 1 1
    // Calculate D+1, store in D, unconditional jump
    PARTS:
    // CPU implementation as specified on page 94

    // Figure out the instruction type
    Xor(a=instruction[15], b=true, out=aInst);
    Not(in=aInst, out=cInst);

    // Should we write the output to memory?
    // If we have a C-instruction and and d3(instruction[3]) is set --> yes
    And(a=cInst, b=instruction[3], out=writeM);

    // Put the ALU output in A, d1(instruction[5]) = 1 --> store output in A
    And(a=cInst, b=instruction[5], out=aluOutToA);

    // If aluOutToA=1 we put the alu output in A otherwise the instruction
    Mux16(a=instruction, b=aluOut, sel=aluOutToA, out=regAIn);

    // If we have a A-instruction or a C-instruction with aluOutToA set to 1
    // we assert A's load bit
    Or(a=aInst, b=aluOutToA, out=loadA);

    // We put the instruction or the alu output in A (if the load bit is set)
    // Finally we set the addressM output
    ARegister(in=regAIn, load=loadA, out=aOut, out[0..14]=addressM);

    // We select the A output or the Memory input depending on the a-bit (instruction[12])
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluInY);

    // If we have a C-instruction and d2(instruction[4]) is set
    // we assert D's load bit
    And(a=cInst, b=instruction[4], out=loadD);

    // We put the alu output in D(if the load bit is set)
    DRegister(in=aluOut, load=loadD, out=dOut);

    // We load the ALU with inputs calculated above along with the
    // control bits c1-c6, instruction[6] - instruction[11]
    // Finally we set the outM output
    ALU(x=dOut, y=aluInY,
        zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=aluOut, zr=aluZROut, ng=aluNGOut,
        out=outM
    );

    // Figure out if we should jump or not
    // ALU outputs: aluZROut 1 if out == 0
    //              aluNGOut 1 if out < 0

    // The output is 0 and jeq is set
    And(a=aluZROut, b=instruction[1], out=jeq);

    // The output is < 0 and jlt is set
    And(a=aluNGOut, b=instruction[2], out=jlt);

    // Output is not 0 or < 0
    Or(a=aluZROut, b=aluNGOut, out=zeroOrNeg);

    // If the output is not 0 or < 0, we have positive output
    Not(in=zeroOrNeg, out=isPositive);

    // We have a positive output and jgt is set
    And(a=isPositive, b=instruction[0], out=jgt);

    // The output is == 0 or < 0
    Or(a=jeq, b=jlt, out=jle);

    // Jump if any of our jump conditions match
    Or(a=jle, b=jgt, out=jump);

    // We should assert PC's load bit if we have a C-instruction
    // and jump == 1
    And(a=cInst, b=jump, out=loadPc);

    // We should only increment pc if we are not jumping
    Not(in=loadPc, out=incPc);

    PC(in=aOut, inc=incPc, load=loadPc, reset=reset, out[0..14]=pc);
}
